const{resolvePackageVersion:resolvePackageVersion,deepResolvePackageVersions:deepResolvePackageVersions,versionCompare:versionCompare}=window.pkgResolve;const fixCliParams=(name,version)=>{if(!version&&name.slice(1).indexOf("@")>0){const namespaced=name.startsWith("@");[name,version]=name.slice(namespaced?1:0).split("@",2);if(namespaced){name=`@${name}`}}return{name:name,version:version}};const cliCommands={yarnball:async(n,v)=>{const{name:name,version:version}=fixCliParams(n,v);const result=await resolvePackageVersion(name,version);return{name:result.name,requested:result.version,resolved:result.match?result.match.version:null,"semver-satisfies":result.satisfies.map((s=>s.version)),tags:result.tags,tarball:result.match?result.match.dist.tarball:undefined,unpackedSize:result.match?result.match.dist.unpackedSize||0:0}},"yarnball-deep":async(n,v)=>{const{name:name,version:version}=fixCliParams(n,v);const match=await deepResolvePackageVersions(name,version);return match?match.tree:{}},"yarnball-list":async(n,v)=>{const{name:name,version:version}=fixCliParams(n,v);const match=await deepResolvePackageVersions(name,version);return match?match.flat:{}},"yarnball-multiples":async(n,v)=>{const{name:name,version:version}=fixCliParams(n,v);const match=await deepResolvePackageVersions(name,version);return match?Object.values(match.flat).filter((v=>Object.keys(v).length>1)):{}}};const createConsole=(example,lastCmd="",prompt="Usage: yarnball[-deep|-list|-multiples] name [version]\n> ",autorun=false)=>{const consoleState={lastCmd:lastCmd,prompt:prompt,dirty:false};const el=document.getElementById(`${example}`);el.innerHTML=`<div class="console"><textarea id="console-${example}"></textarea></div>`;const consoleEl=document.getElementById(`console-${example}`);consoleEl.value=`${consoleState.prompt}${consoleState.lastCmd}`;const handler=async event=>{const curValue=consoleEl.value.replace(consoleState.prompt,"");if(event.key==="Enter"){if(consoleState.dirty){consoleEl.value=consoleState.prompt;consoleState.dirty=false}else{consoleState.lastCmd=curValue;consoleState.dirty=true;const[cmd,name,version]=curValue.replace(/yarn (add|why|install)/,"yarnball").split(/\s+/);consoleEl.value+="\n";if(cmd&&name&&cliCommands[cmd]){const result=await cliCommands[cmd](name,version);consoleEl.value=`${consoleState.prompt}${consoleState.lastCmd}\n${typeof result==="string"?result:JSON.stringify(result,null,2)}\n> `}else{consoleEl.value=consoleState.prompt}}}else if(event.key==="ArrowUp"){consoleEl.value=`${consoleState.prompt}${consoleState.lastCmd}`;consoleState.dirty=false}else if(consoleState.dirty){consoleEl.value=consoleState.prompt;consoleState.dirty=false}if(consoleState.dirty||event.key==="ArrowUp"){event.preventDefault()}consoleEl.scrollTop=consoleEl.scrollHeight};consoleEl.addEventListener("keydown",handler);if(autorun){handler({key:"Enter",preventDefault:()=>{}}).then((()=>{}))}};const createWidget=(example,name,version,{showTags:showTags=true,buttonTxt:buttonTxt="Try It",autoClick:autoClick=false}={})=>{const el=document.getElementById(`${example}`);el.innerHTML=`\n<div class="widget" xmlns="http://www.w3.org/1999/html">\n  <table class="query">\n    <tr>\n      <td width="60%"><label>Package Name</label><input id="name${example}" type="text" value="${name}" /></td>\n      <td width="20%"><label>Range/Tag</label><input id="version${example}" type="text" value="${version}" /></td>\n      <td width="20%"><button id="submit${example}">${buttonTxt}</button></td>\n    </tr>\n  </table>\n  <div id="results${example}" class="results" />\n</div>`;const submit=document.getElementById(`submit${example}`);submit.addEventListener("click",(async()=>{const resultsEl=document.getElementById(`results${example}`);resultsEl.innerHTML="";const name=document.getElementById(`name${example}`).value||undefined;const requestedVersion=document.getElementById(`version${example}`).value||undefined;const result=await resolvePackageVersion(name,requestedVersion);const sortedKeys=Object.keys(result.versions).sort(versionCompare);for(const version of sortedKeys){const span=document.createElement("span");let className="nomatch";if(version===result.match?.version){className="match"}else if(result.satisfies.find((s=>s.version===version))){className="satisfies"}span.className=className;span.innerText=version;if(showTags){let tagCount=0;for(const[tag,tagVer]of Object.entries(result.tags)){if(version===tagVer){span.innerText+=`${tagCount===0?"@":","}${tag}`;tagCount++}}}resultsEl.appendChild(span)}}));if(autoClick){submit.click()}};
