#!/usr/bin/env node

/* START COPY NOTICE
 * MIT License
 * Copyright (c) 2021 Bozeman Pass, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 * END COPY NOTICE */

const { deepResolvePackageVersions } = require('../dist/index');

let name = process.argv[2];
let version = process.argv[3];
const registry = process.argv[4] ||
  process.env['YARN_REGISTRY'] ||
  process.env['NPM_CONFIG_REGISTRY'] ||
  process.env['NPM_REGISTRY']

if (!name) {
  console.error(`yarnball-size <name> [version] [registryUrl]`)
  process.exit(1);
}

if (!version && name.slice(1).indexOf('@') > 0) {
  [name, version] = name.split(/(?<!^)@/, 2);
}

deepResolvePackageVersions(name, version, registry)
  .then(({ flat }) => {
    const totalCount = Object.values(flat).reduce((a, v) => a + Object.keys(v).length, 0);
    const totalSize = Object.values(flat).reduce((a, v) => a + Object.values(v).reduce((b, v) => b + v.unpackedSize, 0), 0);
    const totalUnknownSize = Object.values(flat).reduce((a, v) => a + Object.values(v).reduce((b, v) => b + v.unpackedSize === 0 ? 1 : 0, 0), 0);
    const result = {
      packages: totalCount,
      knownSize: totalSize,
      packagesOfUnknownSize: totalUnknownSize
    }
    console.log(JSON.stringify(result, null, 2));
  });
